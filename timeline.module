<?php
// $Id: timeline.module,v 1.20.2.6.2.1 2009/07/08 20:57:09 xamanu Exp $

/**
 * @file
 * Module providing a scrollable timeline view for Drupal events and nodes.
 */

//////////////////////////////////////////////////////////////////////////////
define('TIMELINE_HORIZONTAL', 0);
define('TIMELINE_VERTICAL', 1);
// define('TIMELINE_ISO_DATE',      '/^([\d]{4})-([\d]{2})-([\d]{2})T([\d]{2}):([\d]{2}):([\d]{2})/'); i think we cal remove this - fd

include dirname(__FILE__) .'/timeline.theme.inc';

//////////////////////////////////////////////////////////////////////////////
// DRUPAL API HOOKS

/**
 * Implementation of hook_help(). Provides online user help.
 */
function timeline_help($section) {
  switch ($section) {
    case 'admin/modules#name':
      return t('timeline');
    case 'admin/modules#description':
      return t('Provides a draggable and scrollable timeline view. Requires the
                views module and the libraries module and makes use of the cck and date module if available.');
    case 'admin/settings/timeline':
      return t('<p>Timeline views provides a draggable and scrollable widget for
                 visualizing temporal information. This screen allows you to
                 override default settings for each timeline. To actually
                 create and manage timelines, use the <a href="!views">views
                 administration</a> screen.</p>', array('!views' => url('admin/build/views')));
  }
}

/**
 * Implementation of hook_views_api
 */
function timeline_views_api() {
  return array('api' => 2);
}

/**
 * Implementation of hook_menu(). Defines menu items and page callbacks.
 */
function timeline_menu() {
  $items = array();
  $items['admin/settings/timeline'] = array(
    'title' => 'Timeline',
    'description' => 'Settings for timeline displays',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('timeline_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Declares administrative settings for the module.
 */
function timeline_admin_settings() {
  // Library
  $form['library'] = array(
    '#type' => 'fieldset', 
    '#title' => t('SIMILE Timeline Library'), 
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE, 
    '#description' => t('You can select to get the timeline libraries from the SIMILE server or your can install it locally.')
  );
  
  $form['library']['timeline_library_source'] = array(
    '#type'          => 'select',
    '#title'         => t('Location of Simile Timeline libraries'),
    '#default_value' => variable_get('timeline_library_source', 'Simile Server'),
    '#options'       => array('hosted' => t('Simile Server')),
    '#description'   => t('Only simile server available. The timeline library is not installed locally.'),
  );
  
  // Check correct inclusion of local timeline library
  if ($timeline_library_status = timeline_validate_library()) {
  	if(is_string($timeline_library_status)) {
  	  $form['library']['source']['#description'] = t($timeline_library_status);
  	}
  	elseif($timeline_library_status == true) {
  	  $form['library']['timeline_library_source']['#options']['local'] = 'Local folder' ;
      $form['library']['timeline_library_source']['#description'] = t('A local timeline library has been found at this location: !timeline_library_path', array('!timeline_library_path' => '<div class="status">'.libraries_get_path('simile_timeline').'</div>'));
  	}
  }
  
  // Display settings
  $form['display'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default display settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['display']['timeline_default_width'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Default width'),
    '#default_value' => variable_get('timeline_default_width', '100%'),
    '#size'          => 6,
    '#maxlength'     => 6,
    '#description'   => t('The default width of a timeline (in units of em, px or %), e.g. 600px or 90%.'),
  );
  $form['display']['timeline_default_height'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Default height'),
    '#default_value' => variable_get('timeline_default_height', '400px'),
    '#size'          => 6,
    '#maxlength'     => 6,
    '#description'   => t('The default height of a timeline (in units of em, px or %), e.g. 400px.'),
  );

  return system_settings_form($form);
}


/**
 * Converts different expected date formats to one global date format to talk to the timeline.
 * 
 * @return
 *   date in defined output
 */ 
function timeline_date_conversion($date, $input_format, $output_format = "Y-m-d\TH:i:s") {
  
  switch($input_format) {
  	case 'date':
  	  if ($output_format == 'timestamp') return date_convert($date, DATE_ISO, DATE_UNIX);
  	  return format_date(date_convert($date, DATE_ISO, DATE_UNIX), 'timestamp', $output_format);
  	case 'datetime':
  	  if ($output_format == 'timestamp') return date_convert($date, DATE_DATETIME, DATE_UNIX);
  	  return format_date(date_convert($date, DATE_DATETIME, DATE_UNIX), 'timestamp', $output_format);
  	case 'datestamp':
  	case 'timestamp':
  	  if ($output_format == 'timestamp') return $date;
      return format_date($date, 'timestamp', $output_format);
  }  	
}


/**
 * Check if all library files properly exist.
 * 
 * @return: TRUE if everything is correct
 *          FALSE if no library was found
 *          string: with an error message of the missing file.
 */ 
function timeline_validate_library() {
  $timeline_path = libraries_get_path('simile_timeline');
  $timeline_library_files = array(
      '/timeline_js/timeline-api.js', 
      '/timeline_js/timeline-bundle.js', 
      '/timeline_ajax/simile-ajax-api.js', 
      '/timeline_ajax/simile-ajax-api.js' 
    );
  // check if library is available 'sites/all/libraries/simile_timeline'
  if(file_check_directory($timeline_path)) {
    foreach($timeline_library_files as $file) {
      $file = $timeline_path.$file;
      if(!file_check_path($file))
        $messages .= '<div>'.t('Error: !timeline_filename not found</div>', array('!timeline_filename' => '<span class="error">'.$timeline_path.$file.'</span>'));	
    }
  	// no errors found
	if(!isset($messages))
      return true;
    else
      return $messages;
  }
  // no library found
  else
    return false;
}

/**
 * Scans the themes directory to include more themes
 * 
 * @return
 *   array with the filenames of found theme files plus the classic theme
 * 
 */
function timeline_available_themes() {
  $timeline_theme_names = array('classicTheme');
  foreach(file_scan_directory(drupal_get_path('module', 'timeline') .'/themes', '.js') as $timeline_theme) {
    $timeline_theme_names[$timeline_theme->name] = $timeline_theme->name;
  }
  return $timeline_theme_names;
}

// TODO: REMOVE - jm
if (!function_exists('array_map_assoc')) {
  function array_map_assoc($callback, $array) {
    return array_map($callback, array_keys($array), array_values($array));
  }
}

function _timeline_to_dim($string) {
  return intval($string) . (strpos($string, '%') !== FALSE ? '%' : 'px');
}